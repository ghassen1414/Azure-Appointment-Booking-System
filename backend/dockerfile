# Stage 1: Base Image and System Dependencies
FROM python:3.11-slim

# Set working directory
WORKDIR /code

# Set environment variables for Python
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# --- FINAL CORRECTED ODBC DRIVER INSTALLATION ---
# This is a multi-step process to reliably install the Microsoft ODBC Driver.
RUN apt-get update && \
    # 1. Install prerequisite packages.
    apt-get install -y --no-install-recommends curl gpg gnupg ca-certificates && \
    # 2. Download the Microsoft GPG key and store it in the standard keyring directory.
    curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o /usr/share/keyrings/microsoft-prod.gpg && \
    # 3. Add the Microsoft repository, explicitly telling it to use the key we just downloaded.
    #    This [signed-by=...] part is the critical fix.
    echo "deb [arch=amd64,arm64,armhf signed-by=/usr/share/keyrings/microsoft-prod.gpg] https://packages.microsoft.com/debian/11/prod bullseye main" > /etc/apt/sources.list.d/mssql-release.list && \
    # 4. Update package lists again to include the new repository.
    apt-get update && \
    # 5. Install the ODBC driver, accepting the EULA non-interactively.
    ACCEPT_EULA=Y apt-get install -y --no-install-recommends msodbcsql18 unixodbc-dev && \
    # 6. Clean up to reduce the final image size.
    apt-get purge -y --auto-remove curl gpg gnupg && \
    rm -rf /var/lib/apt/lists/*

# Stage 2: Install Python Dependencies
COPY ./requirements.txt .

RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Stage 3: Copy Application Code
COPY ./app /code/app

# Stage 4: Expose Port and Define Execution Command
EXPOSE 8000

CMD ["gunicorn", "-w", "4", "-k", "uvicorn.workers.UvicornWorker", "--bind", "0.0.0.0:8000", "app.main:app"]